from hyperopt import hp

xgboost_config_feature_list = [
  # Categorical features:
    'city',
    'param_1',
    'image_top_1',
    'param_3',
    'region',
    'item_seq_number_bucket',
    'param_2',
    'category_name',
    'parent_category_name',
    'avg_days_up_user',
    'log_price',
    'price',
    'desc_len_norm',
    'region+city+parent_category_name-counts',
    'avg_times_up_user',
    'category_name-price-norm',
    'parent_category_name-price-diff',
    'region+category_name+param_1-price-norm',
    'param_1-price-norm',
    'category_name+param_1-price-norm',
    'region+param_1-price-norm',
    'user_id+category_name-price-mean',
    'user_id+param_1-price-mean',
    'region+city+param_1-counts',
    'region+city+category_name-counts',
    'parent_category_name+param_1-price-norm',
    'user_id+parent_category_name-price-mean',
    'category_name+user_type-price-diff',
    'parent_category_name+user_type-price-diff',
    'parent_category_name-price-norm',
    'title_len',
    'user_id+category_name-price-std',
    'parent_category_name+activation_date-counts',
    'region+city+param_1-price-norm',
    'region+city+param_1-price-mean',
    'item_seq_number',
    'region+parent_category_name-counts',
    'category_name-price-diff',
    'user_id+activation_date-counts',
    "user_type-price-diff",
    'price_item_seq_number_ratio',
    'log_item_seq_number',
    'price_log_item_seq_ratio',
    'log_price_log_item_seq_ratio',
    'embedding'
]
xgboost_config = {
    'features': xgboost_config_feature_list,
    'image_feature_folders': ['image_features/ads_image_features'],
    'folds':5,
    'model': 'xgboost',
    # 'model_params': {
    #   'alpha': 0.6,
    #   'colsample_bylevel': 0.3,
    #   'colsample_bytree': 0.3,
    #   'eta': 0.07901772316032044,
    #   'eval_metric': 'rmse',
    #   'gamma': 0.0018188912716341973,
    #   'lambda': 0.4,
    #   'max_depth': 3,
    #   'min_child_weight': 4.4156043204121,
    #   'objective': 'reg:linear',
    #   'silent': 1,
    #   'subsample': 0.3
    # },
    'model_params': {'alpha': 0.7,
    'colsample_bylevel': 0.5,
    'colsample_bytree': 0.3,
    'eta': 0.19956939691181147,
    'eval_metric': 'rmse',
    'gamma': 0.045592984373374,
    'lambda': 0.5,
    'max_depth': 7,
    'min_child_weight': 1.7004451816980637,
    'objective': 'reg:logistic',
    'silent': 1,
    'subsample': 1},
    'tune_params': {
        'param_space': {
            'features': xgboost_config_feature_list,
            'image_feature_folders': ['image_features/ads_image_features'],
            'model': 'xgboost',
            'folds': 3,
            'model_params': {
                'eta': hp.loguniform('eta', -2, 0),
                'gamma': hp.loguniform('gamma', -4, -1),
                'max_depth': hp.choice('max_depth', [5, 7, 10]),
                'min_child_weight': hp.loguniform('min_child_weight', -3, 1),
                'subsample': hp.choice('subsample', [0.1, 0.3, 0.5, 0.7, 1]),
                'colsample_bytree': hp.choice('colsample_bytree', [0.1, 0.3]),
                'colsample_bylevel': hp.choice('colsample_bylevel', [0.3, 0.5, 0.7]),
                'lambda': hp.choice('lambda', [x/10 for x in range(0, 6)]),
                'alpha': hp.choice('alpha', [x/10 for x in range(3, 8)]),
                'objective': hp.choice('objective', ['reg:linear', 'reg:logistic']),
                'eval_metric': 'rmse',
                # 'base_score': y_mean,
                # 'booster': 'gblinear',
                'silent': 1
            },
        },
        'max_evals': 35
    }
}

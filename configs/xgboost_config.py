from hyperopt import hp

xgboost_config_feature_list = [
  # Categorical features:
  'activation_weekday',
  'category_name',
  'city',
  'image_top_1',
  'param_1',
  'param_2',
  'param_3',
  'parent_category_name',
  'region',
  'user_id',
  'user_type',
  # Numerical and boolean features:
  'desc_exclam_count',
  'desc_len_norm',
  'desc_len_wc_norm_ratio',
  'desc_letter_punc_ratio',
  'desc_num_count',
  'desc_num_count_ratio',
  'desc_punc_count',
  'desc_uniq_wc',
  'desc_uniq_wc_ratio',
  'desc_upper_count',
  'desc_upper_count_ratio',
  'desc_wc',
  'desc_wc_norm',
  'desc_wc_norm_ratio',
  'desc_wc_punc_ratio',
#   'has_description',
#   'has_image',
#   'has_one_param',
#   'has_price',
  'item_seq_number',
#   'item_seq_number_below_fifty',
#   'item_seq_number_below_five',
#   'item_seq_number_below_hundred',
#   'item_seq_number_below_ten',
#   'item_seq_number_below_thirty',
#   'item_seq_number_below_twenty',
  'item_seq_number_bucket',
#   'item_seq_number_is_one',
  'log_price',
  'price',
  'title_exclam_count',
  'title_len',
  'title_len_wc_ratio',
  'title_letter_punc_ratio',
  'title_num_count',
  'title_num_count_ratio',
  'title_punc_count',
  'title_uniq_wc',
  'title_uniq_wc_ratio',
  'title_upper_count',
  'title_upper_count_ratio',
  'title_wc',
  'title_wc_punc_ratio',
#   'cat_city_price_mean_active',
#   'cat_city_price_median_active',
#   'cat_city_price_norm_active',
#   'cat_city_price_std_active',
#   'cat_date_price_mean_active',
#   'cat_date_price_median_active',
#   'cat_date_price_norm_active',
#   'cat_date_price_std_active',
#   'cat_price_mean_active',
#   'cat_price_median_active',
#   'cat_price_norm_active',
#   'cat_price_std_active',
#   'city_date_price_mean_max_active',
#   'listings_per_cat_city_date',
#   'listings_per_cat_date',
#   'listings_per_city_date',
#   'listings_per_user',
#   'listings_per_user_cat',
#   'listings_per_user_cat_ratio',
#   'listings_per_user_pcat',
#   'listings_per_user_pcat_ratio',
#   'parent_cat_price_mean_active',
#   'parent_cat_price_median_active',
#   'parent_cat_price_norm_active',
#   'parent_cat_price_std_active',
#   'bow_desc_1',
#   'bow_title_1',
  'brutal_count_1_3',
  'brutal_price_avg_1_3',
  'embedding',
]

xgboost_config = {
    'features': xgboost_config_feature_list,
    'image_feature_folders': ['image_features/ads_image_features'],
    'folds':3,
    'model': 'xgboost',
    'model_params': {
      'alpha': 0.6,
      'colsample_bylevel': 0.3,
      'colsample_bytree': 0.3,
      'eta': 0.07901772316032044,
      'eval_metric': 'rmse',
      'gamma': 0.0018188912716341973,
      'lambda': 0.4,
      'max_depth': 2,
      'min_child_weight': 4.4156043204121,
      'objective': 'reg:linear',
      'silent': 1,
      'subsample': 0.3
    },
    'tune_params': {
        'param_space': {
            'features': xgboost_config_feature_list,
            'image_feature_folders': ['image_features/ads_image_features'],
            'model': 'xgboost',
            'folds': 3,
            'model_params': {
                'eta': hp.loguniform('eta', -2, 0),
                'gamma': hp.loguniform('gamma', -4, -1),
                'max_depth': hp.choice('max_depth', [3, 5, 7]),
                'max_leaves': hp.choice('max_leaves', [10, 30, 50]),
                'min_child_weight': hp.loguniform('min_child_weight', -3, 1),
                'subsample': hp.choice('subsample', [0.1, 0.3, 0.5]),
                'colsample_bytree': hp.choice('colsample_bytree', [0.1, 0.3, 0.5]),
                'colsample_bylevel': hp.choice('colsample_bylevel', [0.1, 0.3, 0.5, 0.7, 1]),
                'lambda': hp.choice('lambda', [x/10 for x in range(0, 6)]),
                'alpha': hp.choice('alpha', [x/10 for x in range(3, 8)]),
                'objective': hp.choice('objective', ['reg:linear', 'reg:logistic']),
                'eval_metric': 'rmse',
                # 'base_score': y_mean,
                # 'booster': 'gblinear',
                'silent': 1
            },
        },
        'max_evals': 15
    }
}

# Image feature will come after normal features
# When changing feature list, also need to change 'categorial_feature' to
# specify which columns are categorical.
# IMPORTANT! Always put categorical features first in the feature list, as some
# features contains more than one columns, it will be hard to figure out
# categorical feature index if we mix them.

from hyperopt import hp

lightgbm_config_feature_list = [
 'city',
 'param_1',
 'image_top_1',
 'param_3',
 'region',
 'item_seq_number_bucket',
 'param_2',
 'category_name',
 'avg_days_up_user',
 'log_price',
 'parent_category_name',
 'embedding_10',
 'price',
 'desc_len_norm',
 'saturation_avg',
 'embedding_19',
 'embedding_1',
 'region+city+parent_category_name-counts',
 'avg_times_up_user',
 'category_name-price-norm',
 'parent_category_name-price-diff',
 'region+category_name+param_1-price-norm',
 'param_1-price-norm',
 'category_name+param_1-price-norm',
 'region+param_1-price-norm',
 'embedding_18',
 'user_id+category_name-price-mean',
 'embedding_6',
 'user_id+param_1-price-mean',
 'embedding_0',
 'region+city+param_1-counts',
 'region+city+category_name-counts',
 'saturation_std',
 'embedding_9',
 'embedding_54',
 'parent_category_name+param_1-price-norm',
 'embedding_28',
 'user_id+parent_category_name-price-mean',
 'category_name+user_type-price-diff',
 'embedding_13',
 'parent_category_name+user_type-price-diff',
 'parent_category_name-price-norm',
 'title_len',
 'user_id+category_name-price-std',
 'parent_category_name+activation_date-counts',
 'embedding_85',
 'embedding_42',
 'region+city+param_1-price-norm',
 'embedding_32',
 'region+city+param_1-price-mean',
 'item_seq_number',
 'region+parent_category_name-counts',
 'category_name-price-diff',
 'user_id+activation_date-counts',
 'embedding_20',
 'embedding_84',
 'region+param_3+user_type-price-norm',
 'embedding_15',
 'user_id+param_1-price-std',
 'embedding_2',
 'title_len_wc_ratio',
 'desc_uniq_wc',
 'param_1-price-std',
 'region+city+user_type-counts',
 'user_id-price-mean',
 'embedding_29',
 'embedding_30',
 'embedding_3',
 'embedding_4',
 'embedding_5',
 'embedding_24',
 'embedding_51',
 'region+city+category_name-price-norm',
 'category_name+user_type-price-std',
 'embedding_22',
 'embedding_39',
 'embedding_99',
 'embedding_31',
 'user_id+category_name-counts',
 'category_name+param_1+activation_date-price-norm',
 'embedding_86',
 'embedding_60',
 'embedding_65',
 'embedding_70',
 'parent_category_name+param_1+user_type-price-norm',
 'desc_wc',
 'category_name+param_1+user_type-price-norm',
 'parent_category_name+param_1-price-std',
 'embedding_25',
 'embedding_56',
 'embedding_64',
 'embedding_73',
 'n_user_items',
 'region+param_1+activation_date-price-norm',
 'region+parent_category_name+param_1-price-norm',
 'region+category_name-counts',
 'region+city+param_3-price-norm',
 'embedding_93',
 'param_1+activation_date-price-norm',
 'user_type-price-norm',
 'desc_punc_count',
 'category_name+param_1-price-std',
 'embedding_14',
 'embedding_44',
 'embedding_53',
 'user_type-price-diff',
 'region+parent_category_name+param_1-counts',
 'embedding_21',
 'embedding_57',
 'embedding_76',
 'embedding_95',
 'embedding_97',
 'user_id+parent_category_name-price-std',
 'region+param_1+user_type-price-norm',
 'category_name+activation_date-price-norm',
 'embedding_26',
 'embedding_27',
 'embedding_47',
 'embedding_74',
 'category_name+param_1+user_type-price-diff',
 'avg_pixel_width',
 'user_id-counts',
 'user_id+parent_category_name-counts',
 'desc_uniq_wc_ratio',
 'region+category_name+param_1-price-std',
 'region+parent_category_name+param_1-price-std',
 'embedding_12',
 'embedding_49',
 'embedding_75',
 'region+city+activation_date-counts',
 'user_id+region-price-norm',
 'param_1-counts',
 'embedding_62',
 'embedding_77',
 'region+city+param_1-price-diff',
 'embedding_67',
 'embedding_87',
 'embedding_92',
 'region+category_name-price-norm',
 'category_name+activation_date+user_type-price-norm',
 'embedding_83',
 'embedding_89',
 'colorfulness',
 'region+parent_category_name+param_1-price-mean',
 'embedding_69',
 'lightness_avg',
 'avg_r',
 'param_1-price-mean',
 'region+param_1-counts',
 'embedding_33'
]

lightgbm_config = {

        'features': lightgbm_config_feature_list,
        'folds': 3,
        'image_feature_folders': ['image_features/ads_image_features'],
        'model': 'lightgbm',
        # 'model_params': {
        #     'bagging_fraction': 0.898898411669864,
        #     'bagging_freq': 10,
        #     'boosting_type': 'gbdt',
        #     'categorical_feature': '0,1,2,3,4,5,6,7,8,9,10',
        #     'learning_rate': 0.15124909294038838,
        #     'max_bin': 255,
        #     'max_depth': 20,
        #     'metric': 'rmse',
        #     'min_data': 500,
        #     'min_data_in_bin': 300,
        #     'min_hessian': 0.40763623871852805,
        #     'num_leaves': 300,
        #     'num_boost_round': 1000,
        #     'objective': 'regression',
        #     'sub_feature': 0.2295600655921562,
        #     # 'top_k': 50,
        #     'top_k': 50,
        #     'seed': 42,
        #     'verbose': -1
        # },
        'categorical_feature': [0,1,2,3,4,5,6,7,8,9,10],
        # 'model_params': {
        #   'boosting_type': 'gbdt',
        #   'learning_rate': 0.7464844287475868,
        #   'max_bin': 350,
        #   'max_depth': 5,
        #   'metric': 'rmse',
        #   'min_data': 500,
        #   'min_data_in_bin': 100,
        #   'min_hessian': 0.9082350725645646,
        #   'num_boost_round': 500,
        #   'num_leaves': 15,
        #   'objective': 'regression',
        #   'sub_feature': 0.334757870928891,
        #   'top_k': 50,
        #   'verbose': -1
        # },
        'model_params': {'boosting_type': 'gbdt', 'learning_rate': 0.1518452576617124, 'max_bin': 500, 'max_depth': 7, 'metric': 'rmse', 'min_data': 750, 'min_data_in_bin': 100, 'min_hessian': 1.8088535712382525, 'num_boost_round': 446, 'num_leaves': 60, 'objective': 'regression', 'sub_feature': 0.22924361218798947, 'top_k': 50, 'verbose': -1},
    # 'features': lightgbm_config_feature_list,
    # 'image_feature_folders': ['image_features/ads_image_features'],
    # 'folds':2,
    # 'model': 'lightgbm',
    # 'model_params': {
    #     'categorical_feature': '0,1,2,3,4,5,6,7,8,9,10',
    #     'objective' : 'regression',
    #     'metric' : 'rmse',
    #     'num_leaves' : 32,
    #     'max_depth': 15,
    #     'learning_rate' ,
    #     'feature_fraction' ,
    #     'num_boost_round': 5000,
    #     # 'early_stopping_round': 500,
    #     'verbosity' : -1
    # },
    'tune_params': {
        'param_space': {
            'features': lightgbm_config_feature_list,
            'image_feature_folders': ['image_features/ads_image_features'],
            'model': 'lightgbm',
            'folds': 3,
            'categorical_feature': [0,1,2,3,4,5,6,7,8,9,10],
            'model_params': {
                'max_depth': hp.choice('max_depth', [5, 7, 10]),
                'min_hessian': hp.loguniform('min_hessian', -3, 1),
                # 'bagging_fraction': hp.uniform('bagging_fraction', 0.3, 0.9),
                # 'bagging_freq': hp.choice('bagging_freq', [0, 10, 50, 100]),
                'sub_feature': hp.uniform('sub_feature', 0.1, 0.5),
                'top_k':  hp.choice('top_k', [20,50,100]),
                'max_bin': hp.choice('max_bin', [255, 350, 500]),
                'min_data_in_bin': hp.choice('min_data_in_bin', [30, 100, 300]),

                'learning_rate': hp.loguniform('learning_rate', -2, 0),
                'boosting_type': 'gbdt',
                'objective': 'regression',
                # 'metric': hp.choice('metric', ['mae', 'mse']),
                'metric': 'rmse',
                'num_leaves': hp.choice('num_leaves', [15, 30, 60]),
                'min_data': hp.choice('min_data', [300, 500, 750, 1000]),
                'num_boost_round': hp.choice('num_boost_round', [300, 500, 750]),
                'early_stopping_rounds': 15,
                'verbose': -1
            },
        },
        'max_evals': 17
    }
}

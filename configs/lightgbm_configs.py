# Image feature will come after normal features
# When changing feature list, also need to change 'categorial_feature' to
# specify which columns are categorical.
# IMPORTANT! Always put categorical features first in the feature list, as some
# features contains more than one columns, it will be hard to figure out
# categorical feature index if we mix them.

from hyperopt import hp

lightgbm_config_feature_list = [
  # Categorical features:
  'city',
  'param_1',
  'image_top_1',
  'param_3',
  'region',
  'item_seq_number_bucket',
  'param_2',
  'category_name',
  'parent_category_name',
  'avg_days_up_user',
  'log_price',
  'price',
  'desc_len_norm',
  'region+city+parent_category_name-counts',
  'avg_times_up_user',
  'category_name-price-norm',
  'parent_category_name-price-diff',
  'region+category_name+param_1-price-norm',
  'param_1-price-norm',
  'category_name+param_1-price-norm',
  'region+param_1-price-norm',
  'user_id+category_name-price-mean',
  'user_id+param_1-price-mean',
  'region+city+param_1-counts',
  'region+city+category_name-counts',
  'parent_category_name+param_1-price-norm',
  'user_id+parent_category_name-price-mean',
  'category_name+user_type-price-diff',
  'parent_category_name+user_type-price-diff',
  'parent_category_name-price-norm',
  'title_len',
  'user_id+category_name-price-std',
  'parent_category_name+activation_date-counts',
  'region+city+param_1-price-norm',
  'region+city+param_1-price-mean',
  'item_seq_number',
  'region+parent_category_name-counts',
  'category_name-price-diff',
  'user_id+activation_date-counts',
  'region+param_3+user_type-price-norm',
  'user_id+param_1-price-std',
  'title_len_wc_ratio',
  'desc_uniq_wc',
  'param_1-price-std',
  'region+city+user_type-counts',
  'user_id-price-mean',
  'region+city+category_name-price-norm',
  'category_name+user_type-price-std',
  'user_id+category_name-counts',
  'category_name+param_1+activation_date-price-norm',
  'parent_category_name+param_1+user_type-price-norm',
  'desc_wc',
  'category_name+param_1+user_type-price-norm',
  'parent_category_name+param_1-price-std',
  'n_user_items',
  'region+param_1+activation_date-price-norm',
  'region+parent_category_name+param_1-price-norm',
  'region+category_name-counts',
  'region+city+param_3-price-norm',
  'param_1+activation_date-price-norm',
  'user_type-price-norm',
  'desc_punc_count',
  'category_name+param_1-price-std',
  'user_type-price-diff',
  'region+parent_category_name+param_1-counts',
  'user_id+parent_category_name-price-std',
  'region+param_1+user_type-price-norm',
  'category_name+activation_date-price-norm',
  'category_name+param_1+user_type-price-diff',
  'user_id-counts',
  'user_id+parent_category_name-counts',
  'desc_uniq_wc_ratio',
  'region+category_name+param_1-price-std',
  'region+parent_category_name+param_1-price-std',
  'region+city+activation_date-counts',
  'user_id+region-price-norm',
  'param_1-counts',
  'region+city+param_1-price-diff',
  'region+category_name-price-norm',
  'category_name+activation_date+user_type-price-norm',
  'region+parent_category_name+param_1-price-mean',
  'param_1-price-mean',
  'region+param_1-counts',
  'user_id-price-std',
  'region+city-counts',
  'user_id+region-price-std',
  'region+city+activation_date-price-norm',
  'param_2-price-norm',
    'user_id+activation_date-price-mean',
  'region+parent_category_name+activation_date-price-norm',
  'category_name+param_1-price-diff',
  'category_name+user_type-price-norm',
  'parent_category_name+param_1+activation_date-price-std',
  'category_name-price-std',
  'desc_len_wc_norm_ratio',
  'region+city+param_2-price-norm',
  'user_id+activation_date-price-std',
  'desc_letter_punc_ratio',
    'user_id+region-counts',
  'region+city+parent_category_name-price-norm',
  'region+city+parent_category_name-price-std',
  'category_name+activation_date-counts',
  'region+parent_category_name-price-std',
  'category_name+param_1+user_type-price-std',
  'region+category_name+activation_date-price-norm',
  'param_1+activation_date+user_type-price-norm',
  'region+category_name+user_type-price-norm',
  'region+city+category_name-price-diff',
  'parent_category_name+param_1+activation_date-price-norm',
  'user_id+activation_date-price-norm',
  'param_1+user_type-counts',
  'param_1+activation_date+user_type-price-diff',
  'user_id-price-norm',
  'parent_category_name+user_type-price-norm',
  'user_id+region-price-mean',
  'region+param_2+activation_date-price-norm',
  'region-price-norm',
  'region+parent_category_name-price-norm',
  'param_1+user_type-price-mean',
  'category_name+param_1+activation_date-price-mean',
  'region+category_name-price-diff',
  'region+city+param_2-counts',
  'region+city-price-norm',
  'category_name+user_type-counts',
  'desc_wc_punc_ratio',
  'region+category_name+user_type-price-diff',
  'param_1+user_type-price-norm',
  'parent_category_name+activation_date+user_type-counts',
  'parent_category_name+user_type-price-std',
  'param_2-price-std',
  'region+category_name+activation_date-price-diff',
  'desc_wc_norm',
  'region+category_name-price-mean',
  'desc_upper_count',
  'param_1+activation_date-price-diff',
  'param_1+user_type-price-diff',
  'region+city+param_2-price-std',
  'parent_category_name+activation_date+user_type-price-diff',
  'parent_category_name+param_1-price-diff',
  'price_item_seq_number_ratio',
  'log_item_seq_number',
  'price_log_item_seq_ratio',
  'log_price_log_item_seq_ratio',
  'embedding',
  'bow_desc',
  'bow_title'
]

lightgbm_config = {

        'features': lightgbm_config_feature_list,
        'folds': 3,
        'image_feature_folders': ['image_features/ads_image_features'],
        'model': 'lightgbm',
        # 'model_params': {
        #     'bagging_fraction': 0.898898411669864,
        #     'bagging_freq': 10,
        #     'boosting_type': 'gbdt',
        #     'categorical_feature': '0,1,2,3,4,5,6,7,8,9,10',
        #     'learning_rate': 0.15124909294038838,
        #     'max_bin': 255,
        #     'max_depth': 20,
        #     'metric': 'rmse',
        #     'min_data': 500,
        #     'min_data_in_bin': 300,
        #     'min_hessian': 0.40763623871852805,
        #     'num_leaves': 300,
        #     'num_boost_round': 1000,
        #     'objective': 'regression',
        #     'sub_feature': 0.2295600655921562,
        #     # 'top_k': 50,
        #     'top_k': 50,
        #     'seed': 42,
        #     'verbose': -1
        # },
        'categorical_feature': [0,1,2,3,4,5,6,7,8],
        # 'model_params': {
        #   'boosting_type': 'gbdt',
        #   'learning_rate': 0.7464844287475868,
        #   'max_bin': 350,
        #   ''model_params': {'boosting_type': 'gbdt',
    # 'early_stopping_rounds': 35,
    # 'learning_rate': 0.14054984031531317,
    # 'max_bin': 350,
    # 'max_depth': 15,
    # 'metric': 'rmse',
    # 'min_data': 1500,
    # 'min_data_in_bin': 1000,
    # 'num_boost_round': 1000,
    # 'num_leaves': 64,
    # 'objective': 'regression',
    # 'sub_feature': 0.16408176343506528,
    # 'top_k': 50,
    # 'verbose': -1},

    'model_params': {'boosting_type': 'gbdt',
    'early_stopping_rounds': 100,
    'learning_rate': 0.13883929944693962,
    'max_bin': 350,
    'max_depth': 7,
    'metric': 'rmse',
    'min_data': 1000,
    'min_data_in_bin': 1500,
    'num_boost_round': 2500,
    'num_leaves': 128,
    'objective': 'regression',
    'sub_feature': 0.18830332081802803,
    'top_k': 50,
    'verbose': -1},
  # 'rounds': [1328, 1504],
        # 'model_params': {'boosting_type': 'gbdt', 'learning_rate': 0.1518452576617124, 'max_bin': 500, 'max_depth': 7, 'metric': 'rmse', 'min_data': 750, 'min_data_in_bin': 100, 'min_hessian': 1.8088535712382525, 'num_boost_round': 446, 'num_leaves': 60, 'objective': 'regression', 'sub_feature': 0.22924361218798947, 'top_k': 50, 'verbose': -1},
    #   'model_params': {'boosting_type': 'gbdt',
    # 'learning_rate': 0.13559835916026047,
    # 'max_bin': 500,
    # 'max_depth': 7,
    # 'metric': 'rmse',
    # 'min_data': 750,
    # 'min_data_in_bin': 100,
    # 'min_hessian': 0.4965995198348241,
    # 'num_leaves': 30,
    # 'num_boost_round': 750,
    # 'objective': 'regression',
    # 'sub_feature': 0.18511250210880564,
    # 'top_k': 50,
    # 'verbose': -1},
    # 'model_params': {'boosting_type': 'gbdt',
    # 'learning_rate': 0.15996094906176148,
    # 'max_bin': 500,
    # 'max_depth': 10,
    # 'metric': 'rmse',
    # 'min_data': 2500,
    # 'min_data_in_bin': 1000,
    # 'num_boost_round': 524,
    # 'num_leaves': 150,
    # 'objective': 'regression',
    # 'sub_feature': 0.15869503448075753,
    # 'top_k': 50,
    # 'verbose': -1},
    # 'model_params': {'boosting_type': 'gbdt',
    # 'learning_rate': 0.13612406979489686,
    # 'max_bin': 500,
    # 'max_depth': 17,
    # 'metric': 'rmse',
    # 'min_data': 1000,
    # 'min_data_in_bin': 1000,
    # 'num_boost_round': 449,
    # 'num_leaves': 250,
    # 'objective': 'regression',
    # 'sub_feature': 0.1381067061003422,
    # 'top_k': 50,
    # 'verbose': -1},
    # 'features': lightgbm_config_feature_list,
    # 'image_feature_folders': ['image_features/ads_image_features'],
    # 'folds':2,
    # 'model': 'lightgbm',
    # 'model_params': {
    #     'categorical_feature': '0,1,2,3,4,5,6,7,8,9,10',
    #     'objective' : 'regression',
    #     'metric' : 'rmse',
    #     'num_leaves' : 32,
    #     'max_depth': 15,
    #     'learning_rate' ,
    #     'feature_fraction' ,
    #     'num_boost_round': 5000,
    #     # 'early_stopping_round': 500,
    #     'verbosity' : -1
    # },
    'tune_params': {
        'param_space': {
            'features': lightgbm_config_feature_list,
            'image_feature_folders': ['image_features/ads_image_features'],
            'model': 'lightgbm',
            'folds': 3,
            'categorical_feature': [0,1,2,3,4,5,6,7,8],
            'model_params': {
                'max_depth': hp.choice('max_depth', [5, 7, 10]),
                # 'min_hessian': hp.loguniform('min_hessian', -1, 1),
                # 'bagging_fraction': hp.uniform('bagging_fraction', 0.3, 0.9),
                # 'bagging_freq': hp.choice('bagging_freq', [0, 10, 50, 100]),
                'sub_feature': hp.loguniform('sub_feature', -2, -1),
                # 'sub_feature': hp.uniform('sub_feature', 0.05, 0.3),
                'top_k':  hp.choice('top_k', [25, 50, 75]),
                'max_bin': hp.choice('max_bin', [255, 350, 500]),
                'min_data_in_bin': hp.choice('min_data_in_bin', [500, 1000, 1500]),

                'learning_rate': hp.uniform('learning_rate', 0.1, 0.7),
                'boosting_type': 'gbdt',
                'objective': 'regression',
                # 'metric': hp.choice('metric', ['mae', 'mse']),
                'metric': 'rmse',
                'num_leaves': hp.choice('num_leaves', [16, 32, 64, 128]),
                'min_data': hp.choice('min_data', [1000, 1500, 2500]),
                'num_boost_round': 2500,
                'early_stopping_rounds': 100,
                'verbose': -1
            },
        },
        'max_evals': 35
    }
}
